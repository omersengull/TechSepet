generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

model Account {
  id                String   @id @default(auto()) @map("_id") @db.ObjectId
  access_token      String
  createdAt         DateTime @db.Date
  expires_at        BigInt
  id_token          String
  provider          String
  providerAccountId String
  scope             String
  token_type        String
  type              String
  updatedAt         DateTime @db.Date
  userId            String   @db.ObjectId
}

model Address {
  id         String   @id @default(auto()) @map("_id") @db.ObjectId
  address    String
  city       String
  createdAt  DateTime @default(now()) @db.Date
  postalCode String
  title      String
  updatedAt  DateTime @updatedAt @db.Date
  userId     String   @db.ObjectId
  user       User     @relation(fields: [userId], references: [id])
  orders     Order[] // Address ile Order arasında ters ilişki tanımı
}

model Product {
  id             String                 @id @default(auto()) @map("_id") @db.ObjectId
  name           String
  description    String?
  inStock        Boolean
  image          String
  price          Float
  brand          String
  createdAt      DateTime               @default(now())
  category       Category?              @relation(fields: [categoryId], references: [id])
  categoryId     String?                @db.ObjectId
  specifications ProductSpecification[]
  reviews        Review[] // EKLENDİ: Ürünün yorumları
  favoritedBy    Favorite[]
}

model Category {
  id             String          @id @default(auto()) @map("_id") @db.ObjectId
  name           String
  products       Product[]
  specifications Specification[]
}

model Specification {
  id                    String                 @id @default(auto()) @map("_id") @db.ObjectId
  name                  String // Örnek: "RAM", "Depolama Alanı", "Renk"
  category              Category               @relation(fields: [categoryId], references: [id])
  categoryId            String                 @db.ObjectId
  productSpecifications ProductSpecification[]

}

model ProductSpecification {
  id              String        @id @default(auto()) @map("_id") @db.ObjectId
  product         Product       @relation(fields: [productId], references: [id])
  productId       String        @db.ObjectId
  specification   Specification @relation(fields: [specificationId], references: [id])
  specificationId String        @db.ObjectId
  value           String // Örnek: "128 GB", "Kırmızı", "6.1 inç"
}

model Review {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  content   String
  rating    Int
  createdAt DateTime @db.Date
  productId String   @db.ObjectId
  userId    String   @db.ObjectId
  product   Product  @relation(fields: [productId], references: [id])
  user      User     @relation(fields: [userId], references: [id])

  @@unique([productId, userId])
}

model User {
  id                      String     @id @default(auto()) @map("_id") @db.ObjectId
  birthday                DateTime?  @db.Date
  createdAt               DateTime   @default(now()) @db.Date
  email                   String     @unique
  emailVerified           DateTime?  @db.Date
  gender                  String?
  hashedPassword          String
  addresses               Address[]
  image                   String?
  name                    String
  phone                   String?
  role                    String     @default("USER")
  surname                 String
  updatedAt               DateTime   @updatedAt @db.Date
  reviews                 Review[]
  orders                  Order[]
  favourites              Favorite[]
  resetToken              String? // Şifre sıfırlama token'ı
  resetTokenExpiry        DateTime?
  verificationToken       String? // Doğrulama token'ı, isteğe bağlı
  verificationTokenExpiry DateTime? // Token geçerlilik süresi, isteğe bağlı
}

model Favorite {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  user      User     @relation(fields: [userId], references: [id])
  userId    String   @db.ObjectId
  product   Product  @relation(fields: [productId], references: [id])
  productId String   @db.ObjectId
  createdAt DateTime @default(now()) @db.Date

  @@unique([userId, productId])
}

model Order {
  id          String   @id @default(auto()) @map("_id") @db.ObjectId
  userId      String   @db.ObjectId
  items       String // JSON string olarak saklanıyor
  totalPrice  Float
  createdAt   DateTime @default(now())
  addressId   String   @db.ObjectId
  addressInfo Json?
  address     Address  @relation(fields: [addressId], references: [id]) // Adres ilişkisi
  user        User     @relation(fields: [userId], references: [id])
}
