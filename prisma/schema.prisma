generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

model Account {
  id                String   @id @default(auto()) @map("_id") @db.ObjectId
  access_token      String
  createdAt         DateTime @db.Date
  expires_at        BigInt
  id_token          String
  provider          String
  providerAccountId String
  scope             String
  token_type        String
  type              String
  updatedAt         DateTime @db.Date
  userId            String   @db.ObjectId
}

model Address {
  id         String   @id @default(auto()) @map("_id") @db.ObjectId
  address    String
  city       String
  createdAt  DateTime @db.Date
  postalCode String
  title      String
  updatedAt  DateTime @db.Date
  userId     String   @db.ObjectId
  user       User     @relation(fields: [userId], references: [id])
}

model Product {
  id          String    @id @default(auto()) @map("_id") @db.ObjectId
  brand       String
  category    String
  description String
  image       String
  inStock     Boolean
  name        String
  price       Float
  createdAt   DateTime @default(now())
  reviews     Review[] // Review ilişkisi
}

model Review {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  content   String
  rating    Int
  createdAt DateTime @db.Date
  productId String   @db.ObjectId
  userId    String   @db.ObjectId
  product   Product  @relation(fields: [productId], references: [id])
  user      User     @relation(fields: [userId], references: [id])
}

model User {
  id             String    @id @default(auto()) @map("_id") @db.ObjectId
  birthday       DateTime? @db.Date
  createdAt      DateTime @db.Date
  email          String    @unique
  emailVerified  DateTime? @db.Date
  gender         String?
  hashedPassword String
  addresses      Address[]
  image          String?
  name           String
  phone          String?
  role           String?   @default("USER")
  surname        String
  updatedAt      DateTime @db.Date
  reviews        Review[] // Kullanıcı incelemeleri
  orders         Order []
}
model Order {
  id         String   @id @default(auto()) @map("_id") @db.ObjectId
  userId     String   @db.ObjectId
  items      String   // JSON string olarak saklanıyor
  totalPrice Float
  createdAt  DateTime @default(now())
  user       User     @relation(fields: [userId], references: [id])
}